#************************************************************************************
#*  Template created by Brian Ruter - drum4ever71@aol.com
#*  To Do....
#*    -Set up Nat Instance (Nat Gateway is not included in free tier
#*    -Set up Route Table
#*    -Make everything highly avaliable (multi AZ)
#*    -Create an EC2 instance in the private subnet
#************************************************************************************ 

AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a basic secure network environmet
Parameters:
  Env:
    Description: The type of environment
    Type: String
    AllowedValues:
    - dev
    - sys
    - test
    - perf
    - prod
    
  VPCCidrBlock:
    Description: Cidr Block for the VPC
    Type: String
    Default: 10.0.0.0/16
    
  PrivateSubnet1CidrBlock:
    Description: Cidr Block for the Private Subnet
    Type: String
    Default: 10.0.1.0/24
    
  PublicSubnet1CidrBlock:
    Description: Cidr Block for the Public Subnet
    Type: String
    Default: 10.0.2.0/24

Resources:
  VirtualPrivateCloud:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
      - Key: Env
        Value: !Ref Env
      - Key: Name
        Value: !Sub VPC-${Env} 

##############################
# Create Subnets             #
##############################               
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      #AvailabilityZone: String
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Env
        Value: !Ref Env
      - Key: Name
        Value: !Sub PrivateSubnet1-${Env}   

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      #AvailabilityZone: String
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Env
        Value: !Ref Env
      - Key: Name
        Value: !Sub PublicSubnet1-${Env}        

###########################################
# Create Security Group for nat instance  #
########################################### 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub NAT-Instance-SG-${Env}
      GroupDescription: Allow outbound traffic on 443 and 80,  inbound from VPC only
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref VPCCidrBlock
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref VPCCidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
##############################
#Ceate NAT Instance       
#  UNDER CONSTRUCTION!!!   #
##############################     
#  Type: AWS::EC2::Instance
#  Properties: 
#    Affinity: String
#    AvailabilityZone: String
#    BlockDeviceMappings: 
#      - EC2 Block Device Mapping
#   CreditSpecification: CreditSpecification
#    DisableApiTermination: Boolean
##    EbsOptimized: Boolean
#    ElasticGpuSpecifications: [ ElasticGpuSpecification, ... ]
#    HostId: String
#    IamInstanceProfile: String
#    ImageId: String
#    InstanceInitiatedShutdownBehavior: String
#    InstanceType: String
#    Ipv6AddressCount: Integer
#    Ipv6Addresses:
#      - IPv6 Address Type
#    K ernelId: String
#    KeyName: String
#    LaunchTemplate: Amazon EC2  Instance LaunchTemplateSpecification
#    Monitoring: Boolean
#    NetworkInterfaces: 
#    - EC2 Network Interface
#    PlacementGroupName: String
#    PrivateIpAddress: String
#    RamdiskId: String
#    SecurityGroupIds: 
#    - String
#    SecurityGroups: 
#    - String
#    SourceDestCheck: Boolean
#    SsmAssociations: 
#      - SSMAssociation
#    SubnetId: String
#    Tags: 
#    - Resource Tag
#    Tenancy: String
#    UserData: String
#    Volumes: 
#    - EC2 MountPoint
#    AdditionalInfo: String


##############################
#Ceate Route Table           #
############################## 


  
##############################
#Export Values               #
############################## 
Outputs:
  VPCCidrBlock:
    Description: CidrBlock for the VPC
    Value: 
      !GetAtt VirtualPrivateCloud.CidrBlock
    Export:
      Name: VPCCidrBlock
      
  VPCID:
    Description: VPC ID for the VPC
    Value: 
      !Ref VirtualPrivateCloud
    Export:
      Name: VPCID
      
  PrivateSubnet1ID:
    Description: Subnet ID for PrivateSubnet1
    Value: 
      !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1ID
      
  PublicSubnet1ID:
    Description: Subnet ID for PublicSubnet1
    Value: 
      !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1ID
